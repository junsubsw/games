import java.awt.*;
import java.applet.Applet;
import java.net.URL; 
import java.applet.AudioClip; 
class Ball{
    public float x,y,dx,dy;
    public int size, radius;
    private Color color;
    public Ball(float x, float y, float dx, float dy, int size, Color color){
        this.x=x;
        this.y=y;
        this.dx=dx;
        this.dy=dy;
        this.color=color;
        this.size=size;
        radius=size>>1;
    }
        public void move(Rectangle bd){
            x+=dx;
            y+=dy;
            if((x<bd.x&&dx<0f)||((x+size)>(bd.x+bd.width)&&dx>0f))
                x+=(dx= -dx);
        }
        public void draw(Graphics g){
            g.setColor(color);
            g.fillOval((int)x-radius, (int)y-radius, size, size);
        }
    
}
class Paddle{
    public int x,y,width,height;
    private Color color;
    
    Paddle(int x, int y, int width, int height, Color color){
        this.x=x;
        this.y=y;
        this.width=width;
        this.height=height;
        this.color=color;
    }
    public void move(int x, Rectangle bd){
        if(x>(width>>1)&&x<(bd.width-(width>>1)))
            this.x=x;
    }
    public int checkReturn(Ball ball, boolean plyr, int r1, int r2, int r3){
        if(plyr&&ball.y>(y-ball.radius)||!plyr&&ball.y<(y+ball.radius)){
            if((int)Math.abs(ball.x-x)<(width/2+ball.radius)){
                ball.dy=-ball.dy;
                ball.dx+=(int)(ball.dx*Math.abs(ball.x-x)/(width/2));
                return r2;
            }else
                return r3;
        }
        return r1;
        
    }
    public void draw(Graphics g){
        g.setColor(color);
        g.fillRect(x-(width>>1),y,width,height);
    }
}

class MiddleBlock {
    public int x,y,width,height;
    private Color color;
    
    MiddleBlock(int x, int y, int width, int height, Color color){
        this.x=x;
        this.y=y;
        this.width=width;
        this.height=height;
        this.color=color;
    }
    
    public void draw(Graphics g){
        g.setColor(color);
        g.fillRect(x,y,width,height);
    }
}

 
public class Ponglet extends Applet implements Runnable{
    private Image offscreenImage;
    private int width,height;
    private Graphics offscr;
    private Thread ticker;
    private Font font;
    private FontMetrics fontMet;
    private int fontHeight;
    private boolean running=false;
    private boolean mouse_in=false;
    private Paddle pPaddle,gPaddle;
    
    private Ball ball;
    private Ball ball2;
    private Ball ball3;
    
    private Dimension msePad;
    private Rectangle table;
    private Point player,game;
    private float trackX;
    private int gScore=0,pScore=0;
    private static final int WAIT=1;
    private static final int SERVE=2;
    private static final int RETURN=4;
    private static final int PGUTTER=8;
    private static final int GGUTTER=16;
    private static final int PSCORE=32;
    private static final int GSCORE=64;
    private static final int PWON=128;
    private static final int GWON=256;
    private int gstate=WAIT;
    
    private static final int MAX_SCORE=15;
    
    private URL codeBase; 
    private AudioClip toc,tac,supermario; 
    
    private MiddleBlock mBlock; 
    
    static boolean keyState[] = new boolean[4]; 
    static final int BALL_INDEX = 0; 
    static final int BALL_INDEX2 = 1;
    static final int BAR_INDEX = 2;
    static final int DEL_INDEX = 3;
    
    public void init(){
        width=getSize().width;
        height=getSize().height;
        table=new Rectangle(width, width);
        msePad=new Dimension(width, height-width);
        pPaddle=new Paddle(width>>1,table.height-6,30,5,Color.BLACK);
        player=new Point(width-width/4,5);
        game=new Point(width/4,5);
        offscreenImage=createImage(width,height);
        offscr=offscreenImage.getGraphics();
        font=new Font("TimesRoman",Font.PLAIN,14);
        fontMet=getFontMetrics(font);
        fontHeight=fontMet.getAscent();
        
        mBlock = new MiddleBlock((width>>1)-(width/6), (table.height>>1)-3,100,8,Color.BLACK);
        
        codeBase = getCodeBase(); 
        toc = getAudioClip(codeBase,"toc.wav"); 
        tac = getAudioClip(codeBase,"tac.wav");
        supermario = getAudioClip(codeBase, "supermario.wav");
        supermario.loop(); //오디오파일 노래를 계속 재생.
        
    }
    public void run(){
        int delay=20,win_show=0,ballSize=10;
        while(running){
            if((gstate&(SERVE|RETURN|PGUTTER|GGUTTER))!=0)
                ball.move(table);
            switch(gstate){
                case WAIT:
                    if(!mouse_in)
                        delay=20;
                    else if(--delay<0){
                        int sLoc=rndInt(table.width-ballSize)+(ballSize>>1);
                        
                        ball = new Ball(sLoc,-ballSize,rnd(5f)+1f,rnd(4f)+4f, ballSize, Color.BLUE);
                        ball2 = new Ball(sLoc,-ballSize,rnd(5f)+1f,rnd(4f)+4f, ballSize, Color.BLUE);
                        ball3 = new Ball(sLoc,-ballSize,rnd(5f)+1f,rnd(4f)+4f, ballSize, Color.BLUE);
                        
                        gstate=SERVE;
                        win_show=100;
                        delay=20;
                    }
                    break;
                case SERVE:
                    gstate=pPaddle.checkReturn(ball, true, SERVE, RETURN, PGUTTER);
                    if(gstate==RETURN) {
                        gPaddle=new Paddle((int)(trackX=width/2),3,30,5,Color.red );
                        toc.play();
                    }
                break;
                case RETURN:
                    if (Math.abs(gPaddle.x - ball.x) >= 1) {
                        gPaddle.move((int) (trackX += (gPaddle.x < ball.x ? 5f : -5f)), table);
                        gstate = gPaddle.checkReturn(ball, false, RETURN, SERVE, GGUTTER);
                        if (gstate == SERVE) {
                            tac.play();
                        }
                    }
                    break;
                case PGUTTER:
                    if((int)ball.y>(table.height+ball.radius))
                        gstate=GSCORE;
                    break;
                case GGUTTER:
                    if((int)ball.y<(table.y-ball.radius))
                        gstate=PSCORE;
                    break;
                case PSCORE:
                    gstate=(++pScore>=MAX_SCORE?PWON:WAIT);
                    break;
                case GSCORE:
                    gstate=(++gScore>=MAX_SCORE?GWON:WAIT);
                    break;
                case PWON:
                case GWON:
                    if(--win_show<0){
                        gstate=WAIT;
                        gScore=pScore=0;
                    }
                    break;
                    
            }
            repaint();
            try{
                ticker.sleep(1000/30);
            }catch(InterruptedException e){
                e.printStackTrace();
            }
                
        }
    }
    public void paint(Graphics g){
        if(offscr==null){
            offscreenImage=createImage(width,height);
            offscr=offscreenImage.getGraphics();
        }
        
        int x2=table.width>>1;
        int y2=table.height>>1;
        
        offscr.setColor(Color.CYAN);
        offscr.fillRect(0,0, x2, y2);
        offscr.fillRect(x2, y2, table.width-x2, table.height-y2);
        offscr.setColor(Color.white);
        offscr.fillRect(x2,0, table.width-x2, table.height-y2);
        offscr.fillRect(0, y2, x2, y2);
        offscr.setFont(font);
        centerText(offscr,game,Color.white,""+gScore);
        centerText(offscr,player,Color.GRAY,""+pScore);
        
        if((gstate&(PWON|GWON))!=0){
            Point winner=gstate==GWON?game:player;
            Point loc=new Point(winner.x,winner.y+15);
            centerText(offscr,loc,Color.black,"Win");
            
        }
        else{
            if((gstate&(SERVE|RETURN|PGUTTER))!=0)
                ball.draw(offscr);
            if (mouse_in || (gstate & (SERVE | RETURN | PGUTTER | GGUTTER)) != 0) {
                pPaddle.draw(offscr);

                if (keyState[BALL_INDEX]) {
                    ball2.draw(offscr);
                    ball2.move(table);
                }
                if (keyState[BALL_INDEX2]) {
                    ball2.draw(offscr);
                    ball3.draw(offscr);
                    ball2.move(table);
                    ball3.move(table);
                }
                if (keyState[BAR_INDEX]) {
                    mBlock.draw(offscr);
                    if (gstate == RETURN) {
                        if (ball.y < (mBlock.y + mBlock.height)&&ball.y>table.height>>1) {
                            if (ball.x > mBlock.x && ball.x < (mBlock.x + mBlock.width)) {
                                ball.dy = -ball.dy;
                                ball.dx += (int) (ball.dx * Math.abs(ball.x - mBlock.x) / (width / 2));
                                toc.play();
                                gstate = pPaddle.checkReturn(ball, true, SERVE, RETURN, PGUTTER);
                            }
                        }
                    }
                }
                if(keyState[DEL_INDEX]){
                    keyState[BALL_INDEX] = false;
                    keyState[BALL_INDEX2] = false;
                    keyState[BAR_INDEX] = false;
                }
            }
            if(gstate==RETURN)
                if (ball.y < table.height>>1) {
                    gPaddle.draw(offscr);
                }
        }
        offscr.setColor(Color.yellow);
        offscr.fillRect(0,msePad.width, table.width, msePad.height);
        if(!mouse_in){
            Point loc=new Point(table.width>>1,table.height+((msePad.height-fontHeight)>>1));
            centerText(offscr,loc,Color.black,"Move Mouse Here");
            
        }
        g.drawImage(offscreenImage, 0, 0, this);
        
    }
    public void update(Graphics g){
        paint(g);
    }
            
    public float rnd(float range){
        return (float)Math.random()*range;
    }
    public int rndInt(int range){
        return (int)(Math.random()*range);
    }
    public void centerText(Graphics g,Point loc,Color clr,String str){
        g.setColor(clr);
        g.drawString(str, loc.x-(fontMet.stringWidth(str)/2), loc.y+fontHeight);
    }
    
    public boolean mouseEnter(Event evt,int x,int y){
        pPaddle.move(x, table);
        mouse_in=true;
        return true;
    }
    public boolean mouseExit(Event evt,int x,int y){
        mouse_in=false;
        return true;
    }
    public boolean mouseMove(Event evt,int x,int y){
        pPaddle.move(x, table);
        return true;
    }
    
     public boolean keyDown(Event e, int k) { 

        switch (k) {
            case '1':
                keyState[BALL_INDEX] = true;
                break;
            case '2':
                keyState[BALL_INDEX2] = true;
                break;
            case '3':
                keyState[BAR_INDEX] = true;
                break;
            case '0':
                keyState[DEL_INDEX] = true;
                break;

            default:
                break;

        }

        System.out.println("지금 눌린 키는 " + (char) k + " 입니다. ");
        return true; 

    }

    public boolean keyUp(Event e, int k) { // 누름이 끝났을때
        switch (k) {
            case '1':
                keyState[BALL_INDEX] = true;
                break;
            case '2':
                keyState[BALL_INDEX2] = true;
                break;
            case '3':
                keyState[BAR_INDEX] = true;
                break;
            case '0':
                keyState[DEL_INDEX] = false;
                break;

            default:
                break;
        }
        System.out.println("누름이 끝난 키는 " + (char) k + " 입니다. ");
        return true;

    }

    public void start(){
        if(ticker==null||!ticker.isAlive()){
            running=true;
            ticker=new Thread(this);
            ticker.setPriority(Thread.MIN_PRIORITY+1);
            ticker.start();
        }
    }
    public void stop(){
        running=false;
    }
    
    
    
}
